## -*- mode:ulam -*-
#=t41013_test_compiler_elementinheritance_quarktoobig_issue_error
#!
./System.ulam:10:1: ERROR: Trying to exceed allotted bit size (32) for quark ConstantLabelAndFont("foobar",33u) with 35 bits.
./A.ulam:6:7: NOTE: Components of ConstantLabelAndFont("foobar",33u) are..
./A.ulam:8:3: NOTE: (3 of 35 bits, at 0) Unsigned(3) mFont.
./A.ulam:9:3: NOTE: (7 of 35 bits, at 3) Unsigned(7) mFreshness.
./A.ulam:17:7: NOTE: (6 of 35 bits, at 10) from super base class: ConstantLabel("foobar").
./A.ulam:32:7: NOTE: (19 of 35 bits, at 16) from shared base: Label.
./A.ulam:6:7: ERROR: CLASS INSTANCE 'ConstantLabelAndFont("foobar",33u)' SIZED 35 FAILED.
./A.ulam:2:9: ERROR: Subclass 'A' inherits from illegal 'ConstantLabelAndFont("foobar",33u)'.
Unrecoverable Program Type Label FAILURE.
##
## informed by Dave ish 1/19/17, t41007: inherited quark too big, assert too overkill.
##
#>R.ulam
  ulam 3;
element R {
  Int test()
  {
    A ela;
    ela.behave();
    return 0;
  }
}

#:A.ulam
  ulam 3;
element A : ConstantLabelAndFont("foobar", 33) {
}

local  typedef Unsigned(3) FontNumber;
quark ConstantLabelAndFont(String fstring, Unsigned fn) : ConstantLabel(fstring)
{
  FontNumber mFont;
  Unsigned(7) mFreshness;
  Void setFontNumber(FontNumber fn) { mFont = fn; }
  virtual FontNumber getFontNumber(StringIndex idx)
  {
    return mFont;
  }
}

quark ConstantLabel(String fstring) : Label
{
  Unsigned(6) mBig;
  ASCII aref(Unsigned idx)
  {
    return fstring[idx];  // Fails ARRAY_INDEX_OUT_OF_BOUNDS if necessary
  }

  virtual Unsigned alengthof()
  {
    return fstring.lengthof;
  }
}

local typedef Unsigned(8) StringIndex;
quark Label {
  StringIndex mStringIndex = 0;  // Glyph within string
  Unsigned(6) mCharCoord;
  Unsigned(5) mPriority;

  StringIndex& afooref()
  {
    return mStringIndex;
  }

  virtual ASCII aref(Unsigned idx);
  Void behave()
  {
    System s;
    Unsigned effidx = 17;
    Atom & a = self.atomof; //you be like me
    Self & kid = (Self&) a; //refer to the us in the copy
    //kid.mStringIndex = (StringIndex) effidx; // This is your byte <--ERROR
    kid.afooref() = (StringIndex) effidx; // This is your byte <--TESTING
    s.assert(kid.afooref() == 17u);
  }
}

##      //informed by: t3237_test_compiler_funcdef_whileifnotbreak
##      // using m
##      // new decl var for the forloop
##
##      // test system quark with native overloaded print funcs; assert
#:System.ulam
  ulam 1;
quark System {
Void print(Unsigned arg) native;
Void print(Int arg) native;
Void print(Int(4) arg) native;
Void print(Int(3) arg) native;
Void print(Unary(3) arg) native;
Void print(Bool(3) arg) native;
Void assert(Bool b) native;
}
#.
